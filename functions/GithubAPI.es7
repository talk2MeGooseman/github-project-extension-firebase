import axios from 'axios';
import * as functions from 'firebase-functions';
import { GITHUB_BASE_URL } from "./Constants";

function getCredentials() {
  if (functions.config().github) {
    return {
      client_id: functions.config().github.client_id,
      client_secret: functions.config().github.client_secret,
    }
  } else {
    return {};
  }
}

export async function getUserGithub(username, decoded) {
  const creds = getCredentials();
  const { data } = await axios.get(`${GITHUB_BASE_URL}/users/${username}`, {
    params: {
      ...creds
    }
  });
  const repos = await getGithubRepos(username, decoded.channel_id);

  const user = {
    user_id: decoded.user_id,
    github_user: {
      login: data.login,
      avatar_url: data.avatar_url,
      repos_url: data.repos_url,
      public_repos: data.public_repos,
    },
    repos
  };

  return user;
}

export async function getGithubRepos(username, channel_id, page = 1) {
  const creds = getCredentials();
  const { data, headers } = await axios.get(`${GITHUB_BASE_URL}/users/${username}/repos`, {
    params: {
      type: 'all',
      per_page: 100,
      sort: 'pushed',
      page: page,
      ...creds
    }
  });

  // Format the data we want from each repo
  let repos = data.map(repo => {
    let { id, name, html_url, full_name, description, language } = repo;
    return {
      id: id.toString(),
      name,
      html_url,
      full_name,
      description,
      language,
    };
  });

  // Check if there any other pages, then fetch them
  const pagesHeader = headers['link'];
  if (pagesHeader && pagesHeader.includes(`rel="last"`)) {
    // Fetch next page
    let pagedRepos = await getGithubRepos(username, channel_id, page + 1);
    // Append to the end of the repos array to keep order
    repos = repos.concat(pagedRepos);
  }

  return repos;
}