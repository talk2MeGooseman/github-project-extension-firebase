const functions = require('firebase-functions');
const axios = require('axios');
const jwt = require('jsonwebtoken');
const secrets = require('./secrets');
// The Firebase Admin SDK to access the Firebase Realtime Database. 
const admin = require('firebase-admin');
admin.initializeApp(functions.config().firebase);
const cors = require('cors')({origin: true});

// Set env configs by firebase functions:config:set github.secret="SECRET"
// Access set env configs via functions.config()
const db = admin.firestore();

function verifyToken(token, secret) {
  const secret_decoded = new Buffer(secret, 'base64')
  decoded = jwt.verify(token, secret_decoded);
}

function getSecret() {
    if (functions.config().twitch) {
      return functions.config().twitch.secret;
    } else {
      return secrets['twitch']['secret'];
    } 
}

exports.fetchBroadcasterGithubInfo = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    let response;
    let status_code;
    let decoded;

    const { username } = req.param('data');
    const auth = req.param('auth');
    const secret = getSecret();    

    try {
      verifyToken(token, secret);
    } catch(err) {
      console.log('JWT was invalid');
      res.status(401).json({});
      return;
    }

    try {
      const { data } = await axios.get(`https://api.github.com/users/${username}`);
      status_code = 200;

      var saveRef = db.collection("brodcasters");

      saveRef.doc(decoded.channel_id).set({
        user_id: decoded.user_id,
        github_user: {
          login:  data.login,
          avatar_url: data.avatar_url,
          repos_url: data.repos_url,
          public_repos: data.public_repos,
        }
      });
    } catch (error) {
      status_code = 400;
      response = {};
      console.log(error)
    }

    res.status(status_code).json({});
  });
});