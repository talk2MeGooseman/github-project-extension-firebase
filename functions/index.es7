import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';

admin.initializeApp(functions.config().firebase);
// Set env configs by firebase functions:config:set github.secret="SECRET"
// Access set env configs via functions.config()
const db = admin.firestore();

import axios from 'axios';

import secrets from './secrets';
import {
  decodeToken,
  verifyToken,
  signToken
} from "./AuthToken";
import {
  setExtensionConfigured
} from "./TwitchAPI";
import {
  getUserGithub,
  getGithubRepos
} from "./GithubAPI";
import {
  saveGithubInfo,
  setSelectedRepos,
  getBroadcasterInfo,
  getSelectedRepos,
  saveGithubRepos
} from "./Firebase";
import { JWT_HEADER } from "./Constants";

// The Firebase Admin SDK to access the Firebase Realtime Database. 
const cors = require('cors')({
  origin: true
});

function getSecret() {
  if (functions.config().twitch) {
    return functions.config().twitch.secret;
  } else {
    return secrets['twitch']['secret'];
  }
}

exports.setBroadcasterGithubInfo = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    let decoded;

    const {
      username
    } = req.param('data');
    const auth = req.param('auth');
    const secret = getSecret();

    try {
      decoded = verifyToken(auth.token, secret);
    } catch (err) {
      console.log('JWT was invalid', err);
      res.status(401).json({});
      return;
    }

    let response = {};
    let status_code = 200;
    try {
      response = await getUserGithub(username, decoded);
      await saveGithubInfo(db, response, decoded);
    } catch (error) {
      status_code = 400;
      console.log(error)
      response = {};
    }

    console.log(response)
    res.status(status_code).json(response);
  });
});

exports.getBroadcasterGithubInfo = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      // Get token from header
      const token = req.get(JWT_HEADER);
      const secret = getSecret();

      // Verify our token
      let decoded = verifyToken(token, secret);

      // Get user info for channel with token
      let user = await getBroadcasterInfo(db, decoded.channel_id);

      if (user) {
        res.status(200).json(user);
      } else {
        res.status(404).end();
      }

    } catch (error) {
      console.log(error)
      res.status(500).end();
    }
  });
});

exports.viewBroadcasterData = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    try {
      const token = req.get(JWT_HEADER);
      const secret = getSecret();
      let decoded;

      try {
        decoded = decodeToken(token, secret);
      } catch (error) {
        console.log('Token was invalid');
        res.status(403).end();
      }

      let user = await getBroadcasterInfo(db, decoded.channel_id);

      let repos = [];
      if (user && user.selected_repos) {
        repos = user.selected_repos.map((repo_id) => {
          return user.repos.find((repo) => {
            return repo.id === repo_id;
          });
        });
      }

      if (user && repos) {
        res.status(200).json({
          user,
          repos
        });
      } else {
        res.status(404).end();
      }

    } catch (error) {
      console.log(error)
      res.status(500).end();
    }
  });
})

exports.selectedReposOrder = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    let response = {};
    let status_code = 200;
    let decoded;

    const token = req.get(JWT_HEADER);
    const secret = getSecret();
    const selected_repos = req.param('selected_repos');

    try {
      decoded = verifyToken(token, secret);
    } catch (error) {
      console.log('JWT was invalid', err);
      res.status(401).json({
        error: err
      });
      return;
    }

    try {
      if (selected_repos.length === 0) {
        throw ('Must have at least one Github Project selected');
      }

      await setSelectedRepos(db, selected_repos, decoded);
    } catch (error) {
      response = {
        error: 'something went wrong saving your selected repos'
      };
      status_code = 400;
    }

    res.status(status_code).json(response);
  })
})

exports.setUserSelectedRepos = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    let response = {};
    let status_code = 200;
    let decoded;

    const {
      selected_repos
    } = req.param('data');
    const auth = req.param('auth');
    const secret = getSecret();

    // Validate token and fetch data
    try {
      decoded = verifyToken(auth.token, secret);

      if (selected_repos.length === 0) {
        throw ('Must have at least one Github Project selected');
      }
    } catch (err) {
      console.log('JWT was invalid', err);
      res.status(401).json({
        error: err
      });
      return;
    }

    try {
      let user = await getBroadcasterInfo(db, decoded.channel_id);

      if (user) {
        // Validate the selected repos belong to user
        let exists = selected_repos.every((repo_id) => {
          return user.repos.find((repo) => {
            return repo.id === repo_id;
          });
        });

        if (!exists) {
          res.status(400).json({
            error: 'Error happend during config, please start over'
          });
        }

        response = await setSelectedRepos(db, selected_repos, decoded);
        status_code = 201;
      } else {
        res.status(400).json({
          error: 'Your Github information does not exist, please restart setup'
        });
      }

      setExtensionConfigured(decoded.channel_id, getSecret());
    } catch (error) {
      status_code = 400;
      console.log(error)
    }

    res.status(status_code).json(response);
  });
});

exports.refreshUsersRepos = functions.https.onRequest((req, res) => {
  cors(req, res, async () => {
    let decoded;

    const token = req.get(JWT_HEADER);
    const secret = getSecret();

    try {
      decoded = verifyToken(token, secret);
    } catch (err) {
      console.log('JWT was invalid', err);
      res.status(401).json({});
      return;
    }

    let response = {};
    let status_code = 200;
    try {
      let user = await getBroadcasterInfo(db, decoded.channel_id);
      const repos = await getGithubRepos(user.github_user.login, decoded.channel_id);
      await saveGithubRepos(db, repos, decoded);
      response = { repos };
    } catch (error) {
      status_code = 400;
      console.log(error)
      response = {};
    }

    console.log(response)
    res.status(status_code).json(response);
  });
});